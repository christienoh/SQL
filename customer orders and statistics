#In this SQL, I'm querying a database with multiple tables in it to quantify statistics about customer and order data.

------------
--How many orders were placed in January?
--Answer: 9681 orders were placed in January
SELECT count(ordered)
FROM JanSales
WHERE length(orderID) = 6
AND orderID <> 'Order ID';

-- How many of those orders were for an iPhone?
--Answer: 379 orders were for an iPhone, but there must be a more elegant way to find this out
SELECT COUNT (ordered)
FROM JanSales
WHERE Product = "iPhone"
AND length(orderID) = 6
AND orderID <> 'Order ID';

--Select the customer account numbers for all orders placed in February
SELECT distinct customers.acctnum
FROM FebSales
LEFT JOIN customers
ON FebSales.orderID = customers.order_id
WHERE length(orderid) = 6
  AND orderid <> 'Order ID';

--Which product was the cheapest one sold in January, and what was the price?
--Answer: AAA Batteries (4-pack), 2.99; this is correct, but the code from Charlotte accounts for any outliers
SELECT distinct Product, min(price)
FROM JanSales
GROUP BY Product, price
ORDER BY price ASC limit 1;

--What is the total revenue for each product sold in January? (Revenue can be calculated using the number of products sold and the price of the products).
SELECT product,
    price*sum(Quantity) as revenue
FROM JanSales
where product <> ''
GROUP BY Product;

--Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?
SELECT Product, sum(Quantity) as Quantity,
       sum(Quantity)*price as Revenue
FROM FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101'
group by product;

--How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?
SELECT count(distinct customers.acctnum),
       avg(Quantity*price),
FROM FebSales
  LEFT JOIN customers
ON FebSales.orderid=customers.order_id
WHERE FebSales.Quantity>2
group by orderID;

--Charlotte answer; need to add "count (distinct)" to get a total (not sum, as that would add up the account numbers), left join b/c we want all the info from febsales and only the acctnum from customers, adding "distinct" removes any duplicate account numbers and the Where and And statements remove any incorrect order ids or blank ids
select
    count(distinct cust.acctnum),
    avg(quantity*price)
FROM FebSales Feb
         LEFT JOIN customers cust
                   ON FEB.orderid=cust.order_id
WHERE Feb.Quantity>2
  AND length(orderid) = 6
  AND orderid <> 'Order ID';
